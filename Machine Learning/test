{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"credits = pd.read_csv('../input/tmdb-movie-metadata/tmdb_5000_credits.csv')\ncredits.head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"movies = pd.read_csv('../input/tmdb-movie-metadata/tmdb_5000_movies.csv')\nmovies.head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"credits.shape","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"movies.shape","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"movies.isnull().sum()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## How to get the weighted averages"},{"metadata":{"trusted":true},"cell_type":"code","source":"V = movies['vote_count']\nR = movies['vote_average']\nC = movies['vote_average'].mean()\nm = movies['vote_count'].quantile(0.7)\n\nmovies['weight_avg'] = (V/(V+m) * R) + (m/(m+V) * C)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Building a Basic Recommendation System\n"},{"metadata":{},"cell_type":"markdown","source":"# Recommendation by Weighted Average Ratings"},{"metadata":{"trusted":true},"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"weight_avg = movies.sort_values('weight_avg', ascending=False)\n\nplt.figure(figsize=(16,8))\n\nax = sns.barplot(x=weight_avg['weight_avg'].head(10),\n                 y=weight_avg['original_title'].head(10),\n                 data=weight_avg, palette='deep')\n\nplt.title(\"Top Voted Movies\")\nplt.xlabel('Weight Average Score')\nplt.ylabel('Movie Title')\nplt.xlim(5, 9)\nplt.show()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Recommendation by Popularity"},{"metadata":{"trusted":true},"cell_type":"code","source":"popular = movies.sort_values('popularity', ascending=False)\n\nplt.figure(figsize=(16,8))\n\nax= sns.barplot(x=popular['popularity'].head(10),\n                y=popular['original_title'].head(10),\n                data=popular, palette='deep')\n\nplt.title(\"Top Popular Movies\")\nplt.xlabel('Popular Score')\nplt.ylabel('Movie Title')\n\nplt.show()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Recommendation by Weight and Popularity"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn import preprocessing\n\nmin_max_scaler = preprocessing.MinMaxScaler()\nmovies_scaler = min_max_scaler.fit_transform(movies[['weight_avg', 'popularity']])\nmovies_norm = pd.DataFrame(movies_scaler, columns=['weight_avg', 'popularity'])\n\nmovies_norm.head(5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"movies[['norm_weight_avg', 'norm_popularity']] = movies_norm\n\nmovies['score'] = movies['norm_weight_avg']*0.5 + movies['norm_popularity']*0.5\nmovies_scored = movies.sort_values(['score'], ascending=False)\nmovies_scored[['original_title', 'norm_weight_avg', 'norm_popularity', 'score']].head(20)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"score = movies.sort_values('score', ascending=False)\n\nplt.figure(figsize=(16,6))\n\nax = sns.barplot(x=score['score'].head(10),\n                 y=score['original_title'].head(10),\n                 data=score, palette='deep')\n\nplt.title(\"Top Rating&Popular Movies\")\nplt.xlabel('Score')\nplt.ylabel('Movie Title')\n\nplt.show()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# **Content-Based Filtering**"},{"metadata":{},"cell_type":"markdown","source":"## Recommendation by sharing similar plot summaries"},{"metadata":{},"cell_type":"markdown","source":"#### Word Vectorization and TF-IDF to convert test in the overview to word vectors"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.feature_extraction.text import TfidfVectorizer","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"#### Abhishek Thakur's arguments for TF-IDF"},{"metadata":{"trusted":true},"cell_type":"code","source":"tfv = TfidfVectorizer(min_df=3,  max_features=None, \n            strip_accents='unicode', analyzer='word',token_pattern=r'\\w{1,}',\n            ngram_range=(1, 3), use_idf=1,smooth_idf=1,sublinear_tf=1,\n            stop_words = 'english')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"movies['overview'] = movies['overview'].fillna('')\n\ntfv_matrix = tfv.fit_transform(movies['overview'])\ntfv_matrix.shape","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Calculating Similarity Scores\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"from sklearn.metrics.pairwise import sigmoid_kernel\n\nsigmoid = sigmoid_kernel(tfv_matrix, tfv_matrix)\n\nindices = pd.Series(movies.index, index=movies['original_title']).drop_duplicates()\n\ndef recommend(title, sig=sigmoid):\n    index = indices[title]\n    score = list(enumerate(sigmoid[index]))\n    score = sorted(score, key=lambda x: x[1], reverse=True)\n    \n    #score of first 10 similar movies\n    score = score[1:11]\n    \n    movie_index = [i[0] for i in score]\n    \n    return movies['original_title'].iloc[movie_index]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"recommend('In Too Deep')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"recommend('Minions')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}